"""
Display management and user interface for Cyberpunk Exploration Game
"""

import time
import sys
import os
from typing import Dict, Any, Optional, List
from config import DISPLAY_WIDTH, DISPLAY_HEIGHT, MOVEMENT_KEYS


class DisplayManager:
    """Manages text-based display, user interface, and game polish features"""
    
    def __init__(self, width: int = DISPLAY_WIDTH, height: int = DISPLAY_HEIGHT):
        """
        Initialize display manager
        
        Args:
            width (int): Display width in characters
            height (int): Display height in characters
        """
        self.width = width
        self.height = height
        self.loading_chars = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
        self.loading_index = 0
    
    def clear_screen(self):
        """Clear the terminal screen"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def display_header(self, title: str = "CYBERPUNK EXPLORATION GAME"):
        """Display game header"""
        print("=" * self.width)
        print(title.center(self.width))
        print("=" * self.width)
        print()
    
    def display_location_info(self, location_data: Dict[str, Any], character_position: tuple):
        """
        Display formatted location information
        
        Args:
            location_data (dict): Location data from world generator
            character_position (tuple): Current character position
        """
        x, y, z = character_position
        
        # Clear screen and show header
        self.clear_screen()
        self.display_header()
        
        # Display coordinates
        print(f"Current Position: ({x}, {y}, {z})")
        print("-" * self.width)
        print()
        
        # Display location description
        if location_data:
            description = location_data.get('description', 'Unknown location')
            source = location_data.get('source', 'unknown')
            
            print("LOCATION:")
            print(self._wrap_text(description))
            print()
            
            # Show source indicator
            if source == 'database':
                print("üìÅ Retrieved from database")
            elif source == 'generated':
                print("ü§ñ Generated by AI")
            else:
                print("‚ùì Unknown source")
        else:
            print("LOCATION: [Loading...]")
        
        print()
        print("-" * self.width)
    
    def display_loading_indicator(self, message: str = "Loading", duration: float = 0.1):
        """
        Display animated loading indicator
        
        Args:
            message (str): Loading message
            duration (float): Duration between frames
        """
        char = self.loading_chars[self.loading_index]
        self.loading_index = (self.loading_index + 1) % len(self.loading_chars)
        
        print(f"\r{char} {message}...", end='', flush=True)
        time.sleep(duration)
    
    def display_error_message(self, error_type: str, message: str, details: Optional[str] = None):
        """
        Display formatted error message
        
        Args:
            error_type (str): Type of error (API, Database, etc.)
            message (str): Error message
            details (str, optional): Additional error details
        """
        print()
        print("‚ùå ERROR:")
        print(f"Type: {error_type}")
        print(f"Message: {message}")
        
        if details:
            print(f"Details: {details}")
        
        print()
        print("The game will continue with fallback content.")
        print("-" * self.width)
    
    def display_success_message(self, message: str):
        """Display success message"""
        print()
        print(f"‚úÖ {message}")
        print()
    
    def display_warning_message(self, message: str):
        """Display warning message"""
        print()
        print(f"‚ö†Ô∏è  WARNING: {message}")
        print()
    
    def display_help(self):
        """Display comprehensive help information"""
        self.clear_screen()
        self.display_header("GAME CONTROLS & HELP")
        
        print("MOVEMENT CONTROLS:")
        print("  W / ‚Üë     - Move up (increase Y)")
        print("  S / ‚Üì     - Move down (decrease Y)")
        print("  A / ‚Üê     - Move left (decrease X)")
        print("  D / ‚Üí     - Move right (increase X)")
        print("  E         - Move forward (increase Z)")
        print("  Q         - Move backward (decrease Z)")
        print()
        
        print("GAME COMMANDS:")
        print("  help      - Show this help screen")
        print("  stats     - Show world statistics")
        print("  export    - Export world data to file")
        print("  clear     - Clear all world data")
        print("  validate  - Validate world integrity")
        print("  quit/exit - Exit the game")
        print()
        
        print("GAME INFORMATION:")
        print("  ‚Ä¢ You are exploring a 100x100x100 cube world")
        print("  ‚Ä¢ Each location is dynamically generated with AI")
        print("  ‚Ä¢ Locations are saved and reused for consistency")
        print("  ‚Ä¢ The world has cyberpunk themes and atmosphere")
        print()
        
        print("TIPS:")
        print("  ‚Ä¢ Locations near each other will have related themes")
        print("  ‚Ä¢ The AI considers surrounding areas when generating content")
        print("  ‚Ä¢ You can explore in any direction within the world bounds")
        print("  ‚Ä¢ Use 'stats' to see how much of the world you've discovered")
        print()
        
        print("=" * self.width)
        input("Press Enter to continue...")
    
    def display_world_statistics(self, stats: Dict[str, Any]):
        """Display world statistics"""
        self.clear_screen()
        self.display_header("WORLD STATISTICS")
        
        print(f"Total Generated Locations: {stats['total_generated_cubes']:,}")
        print(f"Total Possible Locations: {stats['total_possible_cubes']:,}")
        print(f"World Coverage: {stats['coverage_percentage']:.2f}%")
        print()
        
        print("World Bounds:")
        bounds = stats['world_bounds']
        print(f"  Size: {bounds['size']}x{bounds['size']}x{bounds['size']} cube")
        print(f"  Range: ({bounds['min']}, {bounds['min']}, {bounds['min']}) to ({bounds['max']}, {bounds['max']}, {bounds['max']})")
        print()
        
        if stats['recent_cubes']:
            print("Recently Generated Locations:")
            for i, cube in enumerate(stats['recent_cubes'][:5], 1):
                x, y, z = cube['x'], cube['y'], cube['z']
                desc = cube['description'][:50] + "..." if len(cube['description']) > 50 else cube['description']
                print(f"  {i}. ({x}, {y}, {z}): {desc}")
        
        print()
        print("=" * self.width)
        input("Press Enter to continue...")
    
    def display_export_result(self, success: bool, filepath: Optional[str] = None, count: int = 0):
        """Display export operation result"""
        if success:
            self.display_success_message(f"World data exported successfully!")
            print(f"File: {filepath}")
            print(f"Locations exported: {count:,}")
        else:
            self.display_error_message("Export", "Failed to export world data")
    
    def display_clear_result(self, count: int):
        """Display clear operation result"""
        if count > 0:
            self.display_success_message(f"Cleared {count:,} locations from world data")
        else:
            self.display_warning_message("No world data to clear")
    
    def display_validation_result(self, validation: Dict[str, Any]):
        """Display world validation results"""
        self.clear_screen()
        self.display_header("WORLD VALIDATION")
        
        if validation['valid']:
            print("‚úÖ World data is valid!")
        else:
            print("‚ùå World data has errors!")
        
        print(f"Total cubes checked: {validation['total_cubes_checked']:,}")
        print()
        
        if validation['errors']:
            print("ERRORS:")
            for error in validation['errors'][:10]:  # Show first 10 errors
                print(f"  ‚Ä¢ {error}")
            if len(validation['errors']) > 10:
                print(f"  ... and {len(validation['errors']) - 10} more errors")
            print()
        
        if validation['warnings']:
            print("WARNINGS:")
            for warning in validation['warnings'][:10]:  # Show first 10 warnings
                print(f"  ‚Ä¢ {warning}")
            if len(validation['warnings']) > 10:
                print(f"  ... and {len(validation['warnings']) - 10} more warnings")
            print()
        
        print("=" * self.width)
        input("Press Enter to continue...")
    
    def display_movement_feedback(self, direction: str, success: bool, position: tuple):
        """
        Display movement feedback
        
        Args:
            direction (str): Movement direction
            success (bool): Whether movement was successful
            position (tuple): New position
        """
        if success:
            x, y, z = position
            print(f"‚Üí Moved {direction} to ({x}, {y}, {z})")
        else:
            print(f"‚úó Cannot move {direction} - at world boundary!")
    
    def display_invalid_command(self, command: str):
        """Display invalid command message"""
        print(f"‚ùì Invalid command: '{command}'")
        print("Type 'help' for available commands.")
    
    def display_quit_message(self):
        """Display quit confirmation and farewell message"""
        self.clear_screen()
        self.display_header("THANKS FOR PLAYING!")
        
        print("You have successfully explored the cyberpunk world!")
        print()
        print("The AI-generated locations you discovered have been saved")
        print("and will be available when you return to explore again.")
        print()
        print("Keep exploring the neon-lit streets and corporate towers")
        print("of this vast cyberpunk universe!")
        print()
        print("=" * self.width)
        print("Game created with AI assistance")
        print("=" * self.width)
    
    def get_user_input(self, prompt: str = "Enter command") -> str:
        """
        Get user input with proper formatting
        
        Args:
            prompt (str): Input prompt
            
        Returns:
            str: User input
        """
        return input(f"{prompt}: ").strip()
    
    def display_pause(self, message: str = "Press Enter to continue..."):
        """Display pause message and wait for user input"""
        print()
        input(message)
    
    def _wrap_text(self, text: str, width: Optional[int] = None) -> str:
        """
        Wrap text to specified width
        
        Args:
            text (str): Text to wrap
            width (int, optional): Wrap width (defaults to display width)
            
        Returns:
            str: Wrapped text
        """
        if width is None:
            width = self.width - 4  # Account for margins
        
        words = text.split()
        lines = []
        current_line = []
        current_length = 0
        
        for word in words:
            if current_length + len(word) + 1 <= width:
                current_line.append(word)
                current_length += len(word) + 1
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
        
        if current_line:
            lines.append(' '.join(current_line))
        
        return '\n'.join(lines)
    
    def display_context_info(self, context_status: Dict[str, Any]):
        """Display context grid information (for debugging)"""
        print()
        print("CONTEXT GRID INFO:")
        print(f"  Center: {context_status['center']}")
        print(f"  Total cubes: {context_status['total_cubes']}")
        print(f"  Existing: {context_status['existing_cubes']}")
        print(f"  Missing: {context_status['missing_cubes']}")
        print(f"  Radius: {context_status['context_radius']}")
        print()
    
    def display_performance_info(self, operation: str, duration: float):
        """Display performance information"""
        print(f"‚è±Ô∏è  {operation} completed in {duration:.2f} seconds")
    
    def display_api_usage_info(self, usage_stats: Dict[str, Any]):
        """Display API usage statistics"""
        print()
        print("API USAGE STATISTICS:")
        print(f"  Total requests: {usage_stats['request_count']}")
        print(f"  Model: {usage_stats['model']}")
        print(f"  Rate limit delay: {usage_stats['rate_limit_delay']}s")
        print()
