"""
Unit tests for display management and user interface
"""

import pytest
import io
import sys
from unittest.mock import patch, Mock
from game.display import DisplayManager


class TestDisplayManager:
    """Test cases for DisplayManager class"""
    
    @pytest.fixture
    def display_manager(self):
        """Create DisplayManager instance for testing"""
        return DisplayManager(width=80, height=24)
    
    def test_initialization(self, display_manager):
        """Test DisplayManager initialization"""
        assert display_manager.width == 80
        assert display_manager.height == 24
        assert len(display_manager.loading_chars) == 10
        assert display_manager.loading_index == 0
    
    def test_initialization_default(self):
        """Test DisplayManager initialization with default values"""
        from config import DISPLAY_WIDTH, DISPLAY_HEIGHT
        dm = DisplayManager()
        assert dm.width == DISPLAY_WIDTH
        assert dm.height == DISPLAY_HEIGHT
    
    def test_display_header(self, display_manager, capsys):
        """Test header display"""
        display_manager.display_header("TEST GAME")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "=" * 80 in output
        assert "TEST GAME" in output
        assert output.count("=") >= 2  # At least 2 lines of equals signs
    
    def test_display_header_default(self, display_manager, capsys):
        """Test header display with default title"""
        display_manager.display_header()
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "CYBERPUNK EXPLORATION GAME" in output
    
    def test_display_location_info(self, display_manager, capsys):
        """Test location info display"""
        location_data = {
            'description': 'A cyberpunk street with neon lights',
            'source': 'generated'
        }
        character_position = (50, 50, 50)
        
        with patch.object(display_manager, 'clear_screen'):
            display_manager.display_location_info(location_data, character_position)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "Current Position: (50, 50, 50)" in output
        assert "A cyberpunk street with neon lights" in output
        assert "ü§ñ Generated by AI" in output
    
    def test_display_location_info_database_source(self, display_manager, capsys):
        """Test location info display with database source"""
        location_data = {
            'description': 'A corporate plaza',
            'source': 'database'
        }
        character_position = (25, 25, 25)
        
        with patch.object(display_manager, 'clear_screen'):
            display_manager.display_location_info(location_data, character_position)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "üìÅ Retrieved from database" in output
    
    def test_display_location_info_no_data(self, display_manager, capsys):
        """Test location info display with no data"""
        with patch.object(display_manager, 'clear_screen'):
            display_manager.display_location_info(None, (10, 10, 10))
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "LOCATION: [Loading...]" in output
    
    def test_display_loading_indicator(self, display_manager, capsys):
        """Test loading indicator display"""
        with patch('time.sleep'):  # Mock sleep to speed up test
            display_manager.display_loading_indicator("Processing", 0.01)
        
        captured = capsys.readouterr()
        output = captured.out
        
        # Should contain a loading character and message
        assert "Processing..." in output
        assert any(char in output for char in display_manager.loading_chars)
    
    def test_display_loading_indicator_animation(self, display_manager):
        """Test loading indicator animation progression"""
        with patch('time.sleep'):  # Mock sleep to speed up test
            initial_index = display_manager.loading_index
            display_manager.display_loading_indicator("Test", 0.01)
            
            # Index should have advanced
            assert display_manager.loading_index == (initial_index + 1) % len(display_manager.loading_chars)
    
    def test_display_error_message(self, display_manager, capsys):
        """Test error message display"""
        display_manager.display_error_message("API Error", "Connection failed", "Network timeout")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ùå ERROR:" in output
        assert "Type: API Error" in output
        assert "Message: Connection failed" in output
        assert "Details: Network timeout" in output
        assert "The game will continue with fallback content." in output
    
    def test_display_error_message_no_details(self, display_manager, capsys):
        """Test error message display without details"""
        display_manager.display_error_message("Database Error", "Query failed")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ùå ERROR:" in output
        assert "Type: Database Error" in output
        assert "Message: Query failed" in output
        assert "Details:" not in output
    
    def test_display_success_message(self, display_manager, capsys):
        """Test success message display"""
        display_manager.display_success_message("Operation completed successfully")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚úÖ Operation completed successfully" in output
    
    def test_display_warning_message(self, display_manager, capsys):
        """Test warning message display"""
        display_manager.display_warning_message("Low disk space")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ö†Ô∏è  WARNING: Low disk space" in output
    
    def test_display_movement_feedback_success(self, display_manager, capsys):
        """Test movement feedback for successful movement"""
        display_manager.display_movement_feedback("up", True, (50, 51, 50))
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚Üí Moved up to (50, 51, 50)" in output
    
    def test_display_movement_feedback_failure(self, display_manager, capsys):
        """Test movement feedback for failed movement"""
        display_manager.display_movement_feedback("left", False, (0, 50, 50))
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚úó Cannot move left - at world boundary!" in output
    
    def test_display_invalid_command(self, display_manager, capsys):
        """Test invalid command display"""
        display_manager.display_invalid_command("xyz")
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ùì Invalid command: 'xyz'" in output
        assert "Type 'help' for available commands." in output
    
    def test_display_quit_message(self, display_manager, capsys):
        """Test quit message display"""
        with patch.object(display_manager, 'clear_screen'):
            display_manager.display_quit_message()
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "THANKS FOR PLAYING!" in output
        assert "cyberpunk world" in output
        assert "Game created with AI assistance" in output
    
    def test_get_user_input(self, display_manager):
        """Test user input retrieval"""
        with patch('builtins.input', return_value="test input"):
            result = display_manager.get_user_input("Test prompt")
        
        assert result == "test input"
    
    def test_get_user_input_default_prompt(self, display_manager):
        """Test user input with default prompt"""
        with patch('builtins.input', return_value="help"):
            result = display_manager.get_user_input()
        
        assert result == "help"
    
    def test_wrap_text(self, display_manager):
        """Test text wrapping functionality"""
        long_text = "This is a very long line of text that should be wrapped to fit within the specified width when displayed."
        
        wrapped = display_manager._wrap_text(long_text, width=30)
        lines = wrapped.split('\n')
        
        # All lines should be within width
        for line in lines:
            assert len(line) <= 30
        
        # Should have multiple lines
        assert len(lines) > 1
    
    def test_wrap_text_short(self, display_manager):
        """Test text wrapping with short text"""
        short_text = "Short text"
        
        wrapped = display_manager._wrap_text(short_text, width=30)
        
        assert wrapped == short_text
    
    def test_wrap_text_default_width(self, display_manager):
        """Test text wrapping with default width"""
        long_text = "This is a test of the default width wrapping functionality."
        
        wrapped = display_manager._wrap_text(long_text)
        
        # Should use display width minus margins
        lines = wrapped.split('\n')
        for line in lines:
            assert len(line) <= display_manager.width - 4
    
    def test_display_world_statistics(self, display_manager, capsys):
        """Test world statistics display"""
        stats = {
            'total_generated_cubes': 150,
            'total_possible_cubes': 1000000,
            'coverage_percentage': 0.015,
            'world_bounds': {
                'size': 100,
                'min': 0,
                'max': 99
            },
            'recent_cubes': [
                {'x': 50, 'y': 50, 'z': 50, 'description': 'A cyberpunk street with neon lights and holographic displays'},
                {'x': 51, 'y': 50, 'z': 50, 'description': 'Corporate plaza'}
            ]
        }
        
        with patch.object(display_manager, 'clear_screen'), \
             patch('builtins.input', return_value=""):
            display_manager.display_world_statistics(stats)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "WORLD STATISTICS" in output
        assert "Total Generated Locations: 150" in output
        assert "Total Possible Locations: 1,000,000" in output
        assert "World Coverage: 0.02%" in output
        assert "Size: 100x100x100 cube" in output
        assert "Recently Generated Locations:" in output
    
    def test_display_export_result_success(self, display_manager, capsys):
        """Test export result display for success"""
        display_manager.display_export_result(True, "/path/to/file.txt", 150)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚úÖ World data exported successfully!" in output
        assert "File: /path/to/file.txt" in output
        assert "Locations exported: 150" in output
    
    def test_display_export_result_failure(self, display_manager, capsys):
        """Test export result display for failure"""
        display_manager.display_export_result(False)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ùå ERROR:" in output
        assert "Type: Export" in output
        assert "Message: Failed to export world data" in output
    
    def test_display_clear_result_with_count(self, display_manager, capsys):
        """Test clear result display with count"""
        display_manager.display_clear_result(50)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚úÖ Cleared 50 locations from world data" in output
    
    def test_display_clear_result_no_count(self, display_manager, capsys):
        """Test clear result display with no count"""
        display_manager.display_clear_result(0)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ö†Ô∏è  WARNING: No world data to clear" in output
    
    def test_display_validation_result_valid(self, display_manager, capsys):
        """Test validation result display for valid data"""
        validation = {
            'valid': True,
            'total_cubes_checked': 100,
            'errors': [],
            'warnings': []
        }
        
        with patch.object(display_manager, 'clear_screen'), \
             patch('builtins.input', return_value=""):
            display_manager.display_validation_result(validation)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "WORLD VALIDATION" in output
        assert "‚úÖ World data is valid!" in output
        assert "Total cubes checked: 100" in output
    
    def test_display_validation_result_invalid(self, display_manager, capsys):
        """Test validation result display for invalid data"""
        validation = {
            'valid': False,
            'total_cubes_checked': 50,
            'errors': ['Invalid coordinate: (150, 50, 50)', 'Missing description at (25, 25, 25)'],
            'warnings': ['Empty description at (10, 10, 10)']
        }
        
        with patch.object(display_manager, 'clear_screen'), \
             patch('builtins.input', return_value=""):
            display_manager.display_validation_result(validation)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚ùå World data has errors!" in output
        assert "ERRORS:" in output
        assert "Invalid coordinate: (150, 50, 50)" in output
        assert "WARNINGS:" in output
        assert "Empty description at (10, 10, 10)" in output
    
    def test_display_context_info(self, display_manager, capsys):
        """Test context info display"""
        context_status = {
            'center': (50, 50, 50),
            'total_cubes': 27,
            'existing_cubes': 5,
            'missing_cubes': 22,
            'context_radius': 1
        }
        
        display_manager.display_context_info(context_status)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "CONTEXT GRID INFO:" in output
        assert "Center: (50, 50, 50)" in output
        assert "Total cubes: 27" in output
        assert "Existing: 5" in output
        assert "Missing: 22" in output
        assert "Radius: 1" in output
    
    def test_display_performance_info(self, display_manager, capsys):
        """Test performance info display"""
        display_manager.display_performance_info("Database query", 2.5)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "‚è±Ô∏è  Database query completed in 2.50 seconds" in output
    
    def test_display_api_usage_info(self, display_manager, capsys):
        """Test API usage info display"""
        usage_stats = {
            'request_count': 25,
            'model': 'gpt-3.5-turbo',
            'rate_limit_delay': 1.0
        }
        
        display_manager.display_api_usage_info(usage_stats)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "API USAGE STATISTICS:" in output
        assert "Total requests: 25" in output
        assert "Model: gpt-3.5-turbo" in output
        assert "Rate limit delay: 1.0s" in output
